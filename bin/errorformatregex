#!/usr/bin/env node

const getStdin = require(`get-stdin`)
const fs = require(`fs`)
const path = require(`path`)
var XRegExp = require("xregexp")

process.on(`unhandledRejection`, (reason, p) => {
  console.error(reason)
  process.exit(1)
})

class Errorformatregex {
  constructor() {
    this.locations = []
    // key = filename#row#col
    this.srcLocations = new Set()
    this.lineBreakIndexes = []
    this.argv = {}
  }

  async run() {
    if (this.argv[`--debug`]) {
      this.debug = true
    }

    this.filename = this.argv[`--filename`]

    this.findLineBreakIndexes()

    await this.findAllMatches(this.argv[`<regex>`])

    if (this.debug) {
      console.error(`Found locations: ${this.locations.length}`)
      console.error(`Using filename: ${this.filename}`)
    }

    const output = this.addLocationPrefix().join(`\n`)
    process.stdout.write(output)
  }

  parseArgv() {
    return require(`neodoc`).run(
      require(`redent`)(
        `
        ${require(`path`).basename(__filename)} v${
          require(`../package`).version
        }

        ${require(`../package`).description}

        Usage:
          ${require(`path`).basename(__filename)} [options] <regex>...

        Options:
          -h --help            Show this screen.
          --filename=filename  Provide filename if error format does not provide one.
          --debug              Debug output.

        See the xregexp module for regex syntax and flags.

        Example regex option:
          'e/error.* in file (?<file>\\S+) at (?<row>\\d+):(?<col>\\d+)/is'

        Format:
          'error type/regex/regex flags'

        Available error types:
          - error (e)
          - warning (w)
          - info (i)
          - normal (n)
          - delete ignore error location (d),
          - use matched file capture group as file name to find match in (r).
            example: 'r/error\: (?<file>.+?)\: (?<location>.+)$/is'

        Available capture group names:
          - file
          - row
          - col (column)
          - location

        The last matching regex takes precedence.

        To parse the result in vim the errorformat needs to be set:
        let &errorformat = 'errorformatregex:%f:%l:%c:%t:%m'

      `
      ),
      {
        optionsFirst: true,
        smartOptions: true,
      }
    )
  }

  async findAllMatches(errorOptions) {
    for (let errorOption of errorOptions) {
      const [, errorType = `e`, regex, flags] =
        errorOption.match(/^(\w*)\/(.+)\/(.*)$/) || []

      if (!regex) {
        throw new Error(`No regex found in: ${errorOption}`)
      }

      await this.findMatches(errorType, regex, flags)
    }
  }

  async findMatches(errorType, regex, flags) {
    const cregex = XRegExp(regex, flags)
    XRegExp.forEach(this.data, cregex, async (match, i) => {
      const location = { errorType, row: 0, col: 0 }
      const index = match.index

      if (match[0] === ``) {
        throw new Error(`No match for regex: ${regex}.`)
      }

      let row = 0
      for (const lineBreak of this.lineBreakIndexes) {
        if (lineBreak > index) {
          break
        }
        row++
      }

      location.errorIndex = index
      location.errorRow = row
      // location.errorCol = TBD

      location.filename = ` `
      if (match.file) {
        location.filename = match.file
        // if (!fs.existsSync(location.filename)) {
        //   if (this.debug) {
        //     console.error(
        //       `Skipping entry for missing filename: ${location.filename}.`
        //     )
        //   }
        //   continue
        // }
      }

      ;[location.row = 0] = [match.row]
      ;[location.col = 0] = [match.col]

      if (errorType === `r`) {
        location.errorType = `e`
        const locationRegex = match.location
        const otherFile = new Errorformatregex()
        otherFile.argv.filename = location.filename
        otherFile.data = fs.readFileSync(location.filename).toString()
        otherFile.argv["<regex>"] = [`e/${locationRegex}/igm`]
        otherFile.findLineBreakIndexes()
        await otherFile.findAllMatches(otherFile.argv[`<regex>`])

        for (const otherLocation of otherFile.locations) {
          if (!otherLocation) {
            continue
          }

          location.row = otherLocation.errorRow - 1
          // TBD:
          // location.col = 1
          location.errorIndex = otherLocation.errorIndex
          break
        }
      }

      const hash = `${location.filename}#${location.row}#${location.col}`

      // TBD allow dupliates without location?:
      // if (!this.srcLocations.has(hash)) {

      this.locations[row] = location
      // }
      this.srcLocations.add(hash)
    })
  }

  findLineBreakIndexes() {
    const re = /\n/gm
    let match
    while ((match = re.exec(this.data)) !== null) {
      this.lineBreakIndexes.push(match.index)
    }
  }

  addLocationPrefix() {
    const prefixedData = []
    let rowNumber = -1
    for (let rowData of this.data.split(/\n/)) {
      // for testing errorformatregex itself
      rowData = rowData.replace(/^errorformatregex:/, ``)
      // remove potentially existing errorformat regexes.
      rowData = rowData.replace(/^(.+)\:(\d+)\:(\d+)\:/, ``)
      // ?:
      // rowData = rowData.replace(new RegExp(`^` + process.env.PWD + `/*`), ``)
      rowNumber++
      let matched = false
      let prefixed = rowData
      for (const location of this.locations) {
        if (location == null) {
          continue
        }
        if (location.errorRow !== rowNumber) {
          continue
        }
        if (rowData === ``) {
          prefixed = `<errorformatregex: EMPTY ROW MATCH>`
        }
        if (this.filename) {
          location.filename = this.filename
        }
        if (!location.filename) {
          // errorformat does not match if filename is empty
          location.filename = " "
        }
        if (location.errorType === `d`) {
          prefixed = rowData
        } else {
          // rowData: needs to have a value to be a valid errorformat
          prefixed = `errorformatregex:${location.filename}:${location.row}:${
            location.col
          }:${location.errorType}:${rowData ? rowData : ` `}`
        }
      }
      prefixedData.push(prefixed)
    }

    return prefixedData
  }
}

async function main() {
  const main = new Errorformatregex()
  main.argv = main.parseArgv()
  main.data = await getStdin()
  await main.run()
}

main()
